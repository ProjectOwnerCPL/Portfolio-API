#!/usr/bin/env node

// Script d'installation automatique de MongoDB pour Fixer API
const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üçÉ Installation MongoDB pour Fixer API');
console.log('=' .repeat(50));

// Fonction pour ex√©cuter des commandes
function runCommand(command, description) {
    return new Promise((resolve, reject) => {
        console.log(`\nüìã ${description}...`);
        console.log(`üíª ${command}`);
        
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.log(`‚ùå Erreur: ${error.message}`);
                console.log(`üí° Vous pouvez ignorer cette erreur et continuer manuellement`);
                resolve(false);
            } else {
                console.log(`‚úÖ ${description} termin√©`);
                if (stdout) console.log(stdout);
                resolve(true);
            }
        });
    });
}

// Fonction pour v√©rifier si un module existe
function checkModule(moduleName) {
    try {
        require.resolve(moduleName);
        return true;
    } catch (e) {
        return false;
    }
}

// Fonction principale d'installation
async function installMongoDB() {
    try {
        console.log('\nüîç V√©rification de l\'environnement...');
        
        // V√©rifier si on est dans le bon dossier
        if (!fs.existsSync('./package.json')) {
            console.log('‚ùå Erreur: Ex√©cuter depuis le dossier Portfolio-API');
            process.exit(1);
        }

        console.log('‚úÖ Dossier correct d√©tect√©');

        // V√©rifier si Mongoose est d√©j√† install√©
        if (checkModule('mongoose')) {
            console.log('‚úÖ Mongoose d√©j√† install√©');
        } else {
            console.log('üì¶ Installation de Mongoose...');
            const success = await runCommand('npm install mongoose --save', 'Installation Mongoose');
            if (success) {
                console.log('‚úÖ Mongoose install√© avec succ√®s');
            } else {
                console.log('‚ö†Ô∏è  Erreur lors de l\'installation de Mongoose');
                console.log('üí° Essayez manuellement: npm install mongoose');
            }
        }

        // V√©rifier l'installation
        console.log('\nüß™ Test de l\'installation...');
        const testSuccess = await runCommand(
            'node -e "try { require(\'mongoose\'); console.log(\'‚úÖ Mongoose OK\'); } catch(e) { console.log(\'‚ùå Mongoose manquant\'); process.exit(1); }"',
            'V√©rification Mongoose'
        );

        if (testSuccess) {
            console.log('\nüéâ Installation MongoDB termin√©e avec succ√®s !');
            console.log('\nüìã Prochaines √©tapes:');
            console.log('1. üåê Cr√©er un compte MongoDB Atlas: https://www.mongodb.com/atlas');
            console.log('2. ‚öôÔ∏è  Configurer l\'URI dans le fichier .env');
            console.log('3. üöÄ Red√©marrer le serveur: npm run dev');
            console.log('4. üß™ Tester: http://localhost:3000/api/company-mongo/health');
            
            console.log('\nüìñ Documentation compl√®te: MONGODB-SETUP.md');
            console.log('üåê Interface de test: test-mongodb-compare.html');
            
        } else {
            console.log('\n‚ö†Ô∏è  Installation partielle - Probl√®me avec Mongoose');
            console.log('üí° Essayez les commandes manuelles dans MONGODB-SETUP.md');
        }

    } catch (error) {
        console.error('\n‚ùå Erreur fatale:', error.message);
        console.log('üí° Consultez MONGODB-SETUP.md pour l\'installation manuelle');
    }
}

// Options de configuration MongoDB Atlas
function showAtlasConfig() {
    console.log('\nüîß Configuration MongoDB Atlas (Recommand√©):');
    console.log('‚îÄ'.repeat(50));
    console.log('1. Cr√©er un compte sur: https://www.mongodb.com/atlas');
    console.log('2. Cr√©er un cluster gratuit (512MB)');
    console.log('3. Cr√©er un utilisateur de base de donn√©es');
    console.log('4. Permettre l\'acc√®s r√©seau (0.0.0.0/0)');
    console.log('5. Copier l\'URI de connexion');
    console.log('6. Mettre l\'URI dans .env:');
    console.log('   MONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/fixer');
    console.log('\nüí° Gratuit, rapide et sans installation locale !');
}

// Menu principal
function showMenu() {
    console.log('\nüéØ Que voulez-vous faire ?');
    console.log('1. üì¶ Installer Mongoose (requis)');
    console.log('2. üåê Instructions MongoDB Atlas');
    console.log('3. üß™ Tester l\'installation actuelle');
    console.log('4. üìñ Ouvrir la documentation');
    console.log('5. ‚ùå Quitter');
    
    process.stdout.write('\nüëâ Votre choix (1-5): ');
}

// Gestion de l'entr√©e utilisateur
function handleUserInput() {
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    showMenu();

    rl.on('line', async (input) => {
        const choice = input.trim();

        switch(choice) {
            case '1':
                await installMongoDB();
                showMenu();
                break;
            case '2':
                showAtlasConfig();
                showMenu();
                break;
            case '3':
                console.log('\nüß™ Test de l\'installation...');
                await runCommand(
                    'node -e "try { require(\'mongoose\'); console.log(\'‚úÖ Mongoose disponible\'); } catch(e) { console.log(\'‚ùå Mongoose manquant\'); }"',
                    'Test Mongoose'
                );
                await runCommand('npm list mongoose', 'V√©rification package');
                showMenu();
                break;
            case '4':
                console.log('\nüìñ Ouverture de la documentation...');
                console.log('üìÅ MONGODB-SETUP.md - Guide complet');
                console.log('üåê test-mongodb-compare.html - Interface de test');
                showMenu();
                break;
            case '5':
                console.log('\nüëã Au revoir ! MongoDB vous attend...');
                rl.close();
                process.exit(0);
                break;
            default:
                console.log('‚ùå Choix invalide. Tapez 1, 2, 3, 4 ou 5');
                showMenu();
                break;
        }
    });
}

// D√©marrage selon les arguments
if (process.argv.includes('--install')) {
    // Installation directe
    installMongoDB();
} else if (process.argv.includes('--atlas')) {
    // Instructions Atlas seulement
    showAtlasConfig();
} else {
    // Menu interactif
    handleUserInput();
}
